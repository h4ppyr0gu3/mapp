stages:          # List of stages for jobs, and their order of execution
  - docker-build
  - rubocop
  - rspec
  - deploy

docker-build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

# build-job:       # This job runs in the build stage, which runs first.
#   stage: build
#   script:
#     - echo "Compiling the code..."
#     - echo "Compile complete."

# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."

image: ruby:3.1.2

services:
  - redis:latest
  - postgres:latest

variables:
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: mapp_test

cache:
  paths:
    - vendor/ruby

before_script:
  - ruby -v 
  - apt-get update -q && apt-get install nodejs -yqq
  - bundle config set --local deployment true  # Install dependencies into ./vendor/ruby
  - bundle install 
  - bundle exec rails db:migrate RAILS_ENV=test

rubocop:
  stage: lint
  script:
    - rubocop

rspec:
  stage: test
  script:
    - rspec spec

rails:
  variables:
    POSTGRES_PASSWORD: postgres
    POSTGRES_HOST: postgres
    POSTGRESS_USERNAME: postgres
    POSTGRES_DATABASE: gitlab_test
    REDIS_URL: 
    # DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/mapp_test"
  script:
    - rails db:migrate
    - rails db:seed
    - rails test

deploy:
  stage: deploy
  environment: production
  script:
    - gem install dpl
    - dpl --provider=heroku --app=$HEROKU_APP_NAME --api-key=$HEROKU_PRODUCTION_KEY
